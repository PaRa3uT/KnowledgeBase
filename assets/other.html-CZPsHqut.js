import{_ as s,c as a,b as n,o as i}from"./app-BsHIgujo.js";const l={};function r(t,e){return i(),a("div",null,e[0]||(e[0]=[n(`<h1 id="other" tabindex="-1"><a class="header-anchor" href="#other"><span>Other</span></a></h1><h2 id="elasticsearch" tabindex="-1"><a class="header-anchor" href="#elasticsearch"><span><a href="https://www.elastic.co/" target="_blank" rel="noopener noreferrer">Elasticsearch</a></span></a></h2><h2 id="opensearch" tabindex="-1"><a class="header-anchor" href="#opensearch"><span><a href="https://opensearch.org/" target="_blank" rel="noopener noreferrer">OpenSearch</a></span></a></h2><p>Fork Elasticsearch</p><h2 id="sphinx" tabindex="-1"><a class="header-anchor" href="#sphinx"><span><a href="http://www.sphinxsearch.com/" target="_blank" rel="noopener noreferrer">Sphinx</a></span></a></h2><h2 id="ipfs" tabindex="-1"><a class="header-anchor" href="#ipfs"><span><a href="ipfs.io">IPFS</a></span></a></h2><h2 id="qemu" tabindex="-1"><a class="header-anchor" href="#qemu"><span>QEMU</span></a></h2><p>qemu -m 512 -cdrom /путь/к_iso-образу/example.iso -boot d (Запуск Live CD из ISO-образа) qemu -smp threads=2 -m 1024 -cdrom /путь/к_iso-образу/example.iso -boot d qemu-img create -f raw disk.img mysize (create disk image) qemu-system-i386.exe -smp threads=2 -hda myimage.img -m 1024 -cdrom /путь/к_iso-образу/example.iso -boot d qemu-img info disk.img</p><h2 id="ansible" tabindex="-1"><a class="header-anchor" href="#ansible"><span>Ansible</span></a></h2><p>ansible --version<br> ansible [all | ungrouped | &lt;group_name&gt; | &lt;host_name&gt; | host_ip] --list-hosts<br> ansible-playbook playbooks/&lt;playbook&gt;.yml ansible-vault ansible-vault encrypt host_vars/cdn-01.example.com/secret (Зашифровать файл) ansible-vault edit host_vars/cdn-01.example.com/secret (Отредактировать зашифрованный файл) ansible-vault view host_vars/cdn-01.example.com/secret (Показать зашифрованный файл)</p><h2 id="minikube" tabindex="-1"><a class="header-anchor" href="#minikube"><span>Minikube</span></a></h2><h3 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>Install</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span>
<span class="line">sudo install minikube-linux-amd64 /usr/local/bin/minikube</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>minikube start<br> minikube status<br> minikube stop<br> minikube delete<br> minikube service list<br> minikube kubectl -- get pods<br> minikube dashboard<br> minikube logs<br> minikube version --components<br> kubectl version ()</p><h2 id="защита-от-фрода" tabindex="-1"><a class="header-anchor" href="#защита-от-фрода"><span>Защита от фрода</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Верификация транзакции</span>
<span class="line">  При новом заказе от неверифицированного клиента, мы:</span>
<span class="line">      Проверяем его по модулю FraudRecord. Это международная база ненадежных клиентов, мошенников и прочих нехороших.</span>
<span class="line">      Проверяем количество неудачных попыток оплаты. Если их менее двух — всё ОК. Если их больше — переходим к верификации клиента и ставим метку «подозрительный».</span>
<span class="line">      Проверяем, уникален ли IP клиента. Часто уже заблокированные из-за фрода клиенты создают новые аккаунты на другие имена.</span>
<span class="line">      Проверяем соответствие гео-IP со страной биллинга. Очень многие мошенники платят картами из Европы и США, но сами находятся в СНГ или Китае.</span>
<span class="line">  При повторных заказах и продлениях, клиенту нужно пройти только пункт 2.</span>
<span class="line"></span>
<span class="line">Верификация клиента</span>
<span class="line"></span>
<span class="line">  Верификация личности нужна для того, чтобы убедиться, что клиент является живым человеком и удостовериться, что платежный метод действительно принадлежит ему. Для этого мы запрашиваем у клиента документы, подтверждающие его личность.</span>
<span class="line"></span>
<span class="line">  Принимаются только документы государственного образца из следующего списка:</span>
<span class="line">      Паспорт (Passport);</span>
<span class="line">      Идентификационная карточка (Identity Card, он же ID) — аналог паспорта во многих странах;</span>
<span class="line">      Водительское удостоверение (Driving Licence) с фотографией;</span>
<span class="line">      Свидетельство о временном гражданстве (Temporary Resident Card)</span>
<span class="line">      Свидетельство о временном/постоянном виде на жительство (Residence permit)</span>
<span class="line"></span>
<span class="line">  Мы тщательно проверяем все документы на соответствие госстандартам. Хотя зачастую подделка определяется с первого взгляда. Так, один из клиентов прислал паспорт с датой рождения «30 декабря 1792 года».</span>
<span class="line"></span>
<span class="line">  Для проверки платежного метода, мы требуем фото банковской карты (с видимой лицевой стороной, но закрытым CVV) или скриншот оплаты из PayPal, где видно, что оплата была совершена на нашем сайте. Этот пункт уже привычен многим.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16)]))}const d=s(l,[["render",r],["__file","other.html.vue"]]),p=JSON.parse('{"path":"/unsorted/other.html","title":"Other","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Elasticsearch","slug":"elasticsearch","link":"#elasticsearch","children":[]},{"level":2,"title":"OpenSearch","slug":"opensearch","link":"#opensearch","children":[]},{"level":2,"title":"Sphinx","slug":"sphinx","link":"#sphinx","children":[]},{"level":2,"title":"IPFS","slug":"ipfs","link":"#ipfs","children":[]},{"level":2,"title":"QEMU","slug":"qemu","link":"#qemu","children":[]},{"level":2,"title":"Ansible","slug":"ansible","link":"#ansible","children":[]},{"level":2,"title":"Minikube","slug":"minikube","link":"#minikube","children":[{"level":3,"title":"Install","slug":"install","link":"#install","children":[]}]},{"level":2,"title":"Защита от фрода","slug":"защита-от-фрода","link":"#защита-от-фрода","children":[]}],"git":{"updatedTime":1698130122000,"contributors":[{"name":"Tarasov Artur","username":"Tarasov Artur","email":"para3ut.74@gmail.com","commits":52,"url":"https://github.com/Tarasov Artur"},{"name":"Тарасов Артур Робертович","username":"Тарасов Артур Робертович","email":"artarasov@mts.ru","commits":1,"url":"https://github.com/Тарасов Артур Робертович"},{"name":"PaRa3uT","username":"PaRa3uT","email":"PaRa3uT.74@gmail.com","commits":3,"url":"https://github.com/PaRa3uT"}]},"filePathRelative":"unsorted/other.md"}');export{d as comp,p as data};
